(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{630:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"vue路由模式及原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue路由模式及原理"}},[t._v("#")]),t._v(" vue路由模式及原理")]),t._v(" "),s("h3",{attrs:{id:"vue路由模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue路由模式"}},[t._v("#")]),t._v(" vue路由模式")]),t._v(" "),s("p",[t._v("vue中，路由模式主要有两种："),s("code",[t._v("hash模式和history模式")]),t._v("。"),s("code",[t._v("默认是hash模式")])]),t._v(" "),s("p",[t._v("hash模式：也就是url后面带'#'号键。"),s("code",[t._v("http://localhost:8082/#login")])]),t._v(" "),s("p",[t._v("history模式：url后面不带'#'号键。"),s("code",[t._v("http://localhost:8082/login")])]),t._v(" "),s("p",[t._v("在vue项目里，路由文件下，使用"),s("code",[t._v("mode:hash")]),t._v("来确定使用哪种路由模式。")]),t._v(" "),s("p",[t._v("当页面发生改变时，这两种模式下，浏览器都会新增一个记录。区别在于是否重新请求页面。")]),t._v(" "),s("h3",{attrs:{id:"hash模式和history模式特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash模式和history模式特点"}},[t._v("#")]),t._v(" hash模式和history模式特点")]),t._v(" "),s("p",[s("code",[t._v("hash模式特点：")])]),t._v(" "),s("p",[t._v("hash模式后面的'#'号键，表示页面中的位置。通过"),s("code",[t._v("window.location.hash")]),t._v("获取.")]),t._v(" "),s("p",[t._v("1、hash模式的原理是触发 onhashchange 事件，可通过 window 对象监听")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hashchange"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n")])])]),s("p",[t._v("2、hash模式不会向服务端请求，改变hash值，也就是改变'#'后面的值，并不会重新请求页面。跳转到与当前URL同文档的url。")]),t._v(" "),s("p",[t._v("这里说的不会重新请求页面，是说不会重新请求html，进入到页面后，页面加载会执行生命周期里面的代码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("localhost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8082")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("#login "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果重新请求，只会发送http://localhost:8082,所以不会重新请求页面")]),t._v("\n")])])]),s("p",[t._v("3、hash值发生改变时，浏览器就会在历史记录里新增一个记录")]),t._v(" "),s("p",[t._v("4、hash模式会创建hashHistory对象,在路由发生改变时，会触发两个方法，push方法和replace方法")]),t._v(" "),s("p",[t._v("push()方法将新路由添加到历史记录的栈顶，replace()方法则是把当前路由替换成新的路由。")]),t._v(" "),s("p",[s("code",[t._v("history模式特点")])]),t._v(" "),s("p",[t._v("history 的原理是利用H5的api，分别是history.back()、history.go()、history.forward()、history.pushState()、history.replaceState()、window.onpopState()这几个方法")]),t._v(" "),s("p",[t._v("1、history模式，监听地址变化，使用："),s("code",[t._v("window.onpopstate")])]),t._v(" "),s("p",[t._v("1、vue中history模式，通过history Api的pushState()和replaceState()两个方法来实现的")]),t._v(" "),s("p",[t._v("pushState()可以改变url地址且不会发送请求,replaceState()可以读取历史记录栈,还可以对浏览器记录进行修改。与hash模式的两个方法功能相同")]),t._v(" "),s("p",[t._v("2、history模式需要后端配合，因为url路径修改后会请求服务器数据。如果服务器无响应就会出现404错误。所以需要服务器配置一个默认路径。比如在nginx里面配置重定向地址")])])}),[],!1,null,null,null);s.default=r.exports}}]);