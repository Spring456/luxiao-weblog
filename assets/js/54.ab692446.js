(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{508:function(a,r,e){a.exports=e.p+"assets/img/arrway.854225f2.png"},698:function(a,r,e){"use strict";e.r(r);var s=e(2),t=Object(s.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"数组方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[a._v("#")]),a._v(" 数组方法")]),a._v(" "),r("p",[r("img",{attrs:{src:e(508),alt:"数组方法"}})]),a._v(" "),r("h3",{attrs:{id:"join-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#join-方法"}},[a._v("#")]),a._v(" join()方法")]),a._v(" "),r("p",[a._v("语法：把数组转换成字符串，然后给他规定个连接字符，默认的是逗号( ，)")]),a._v(" "),r("p",[a._v("结果：不改变原数组；重新生成新的数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = [1,2,3];\nconsole.log(arr.join()); 　　　　// 1,2,3\nconsole.log(arr.join("-")); 　　// 1-2-3\nconsole.log(arr); 　　　　　　　　// [1, 2, 3]（原数组不变）\n')])])]),r("h3",{attrs:{id:"push-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#push-方法"}},[a._v("#")]),a._v(" push()方法")]),a._v(" "),r("p",[a._v("语法：向数组末尾添加一个值。")]),a._v(" "),r("p",[a._v("结果：改变原数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = ["Lily","lucy","Tom"];\nvar count = arr.push("Jack","Sean");\nconsole.log(count); 　// 5\nconsole.log(arr);　// ["Lily", "lucy", "Tom", "Jack", "Sean"]\n')])])]),r("h3",{attrs:{id:"pop-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pop-方法"}},[a._v("#")]),a._v(" pop()方法")]),a._v(" "),r("p",[a._v("语法：移除数组最后一项")]),a._v(" "),r("p",[a._v("结果：返回移除的那个值，改变原数组，减少原数组的length")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = ["Lily","lucy","Tom"];\nvar item = arr.pop();\nconsole.log(item);  // Tom\nconsole.log(arr);  // ["Lily", "lucy"]\n')])])]),r("h3",{attrs:{id:"shift-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shift-方法"}},[a._v("#")]),a._v(" shift()方法")]),a._v(" "),r("p",[a._v("语法：删除原数组第一项")]),a._v(" "),r("p",[a._v("结果：返回删除元素的值；如果数组为空则返回undefined 。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = ["Lily","lucy","Tom"];\nvar item = arr.shift();\nconsole.log(item); 　// Lily\nconsole.log(arr);  // ["lucy", "Tom"]\n')])])]),r("h3",{attrs:{id:"unshift-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unshift-方法"}},[a._v("#")]),a._v(" unshift()方法")]),a._v(" "),r("p",[a._v("语法：将参数添加到原数组开头")]),a._v(" "),r("p",[a._v("结果：返回数组长度，改变原数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = ["Lily","lucy","Tom"];\nvar count = arr.unshift("Jack","Sean");\nconsole.log(count); // 5\nconsole.log(arr); //["Jack", "Sean", "Lily", "lucy", "Tom"]\n')])])]),r("h3",{attrs:{id:"sort-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sort-方法"}},[a._v("#")]),a._v(" sort()方法")]),a._v(" "),r("p",[a._v("语法：对数组的项进行排序")]),a._v(" "),r("p",[a._v("结果：改变原数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr1 = ["a", "d", "c", "b"];\nconsole.log(arr1.sort()); 　　　　　　　　　　// ["a", "b", "c", "d"]\n')])])]),r("p",[a._v("sort()方法比较的是字符串，没有按照数值的大小对数字进行排序，要实现这一点，就必须使用一个排序函数")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("function sortNumber(a,b)\n{\n　　return a - b\n}\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [13, 24, 51, 3]; \nconsole.log(arr.sort()); 　　　　　　　　　　// [13, 24, 3, 51] \nconsole.log(arr.sort(sortNumber)); 　　　　// [3, 13, 24, 51](数组被改变)\n")])])]),r("p",[a._v("sort()函数中，a-b表示升序排列；b-a表示降序排序")]),a._v(" "),r("h3",{attrs:{id:"reverse-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reverse-方法"}},[a._v("#")]),a._v(" reverse()方法")]),a._v(" "),r("p",[a._v("语法：反转数组项的顺序")]),a._v(" "),r("p",[a._v("结果：改变原数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [13, 24, 51, 3];\nconsole.log(arr.reverse()); 　　　　　　　　//[3, 51, 24, 13]\nconsole.log(arr); 　　　　　　　　　　　　　　//[3, 51, 24, 13](原数组改变)\n")])])]),r("h3",{attrs:{id:"concat-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concat-方法"}},[a._v("#")]),a._v(" concat()方法")]),a._v(" "),r("p",[a._v("语法:合并数组。将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。")]),a._v(" "),r("p",[a._v("结果：产生新的数组，不改变原数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1,3,5,7];\nvar arrCopy = arr.concat(9,[11,13]);\nconsole.log(arrCopy); 　　　　　　　　　　　　//[1, 3, 5, 7, 9, 11, 13]\nconsole.log(arr); 　　　　　　　　　　　　　　// [1, 3, 5, 7](原数组未被修改)\n")])])]),r("h3",{attrs:{id:"slice-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#slice-方法"}},[a._v("#")]),a._v(" slice()方法")]),a._v(" "),r("p",[a._v("语法：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。\n1、slice()方法可以接受一或两个参数，即要返回项的起始和结束位置")]),a._v(" "),r("p",[a._v("2、在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。")]),a._v(" "),r("p",[a._v("3、如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。")]),a._v(" "),r("p",[a._v("4、从下标0开始")]),a._v(" "),r("p",[a._v("结果：不改变原数组，会重新生成新的数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1,3,5,7,9,11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1,4);\nvar arrCopy3 = arr.slice(1,-2);\nvar arrCopy4 = arr.slice(-4,-1);\nconsole.log(arr); 　　　　　　　　　　　　　　//[1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy); 　　　　　　　　　　　 //[3, 5, 7, 9, 11]\nconsole.log(arrCopy2); 　　　　　　　　　　　//[3, 5, 7]\nconsole.log(arrCopy3); 　　　　　　　　　　　//[3, 5, 7]\nconsole.log(arrCopy4); 　　　　　　　　　　　//[5, 7, 9]\n")])])]),r("p",[a._v("只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。")]),a._v(" "),r("p",[a._v("设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。")]),a._v(" "),r("p",[a._v("设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。")]),a._v(" "),r("p",[a._v("两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。")]),a._v(" "),r("h3",{attrs:{id:"splice-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#splice-方法"}},[a._v("#")]),a._v(" splice()方法")]),a._v(" "),r("p",[a._v("语法：")]),a._v(" "),r("p",[a._v("1、删除：指定 2 个参数：要删除的第一项的位置和要删除的项数。从数组的索引0开始")]),a._v(" "),r("p",[a._v("2、插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。")]),a._v(" "),r("p",[a._v("3、替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1,3,5,7,9,11];\nvar arrRemoved = arr.splice(0,2);\nconsole.log(arr); 　　　　　　　　　　　　　　　//[5, 7, 9, 11]\nconsole.log(arrRemoved); 　　　　　　　　　　　//[1, 3]\nvar arrRemoved2 = arr.splice(2,0,4,6);\nconsole.log(arr); 　　　　　　　　　　　　　　　// [5, 7, 4, 6, 9, 11]\nconsole.log(arrRemoved2); 　　　　　　　　　　// []\nvar arrRemoved3 = arr.splice(1,1,2,4);\nconsole.log(arr); 　　　　　　　　　　　　　　　// [5, 2, 4, 4, 6, 9, 11]\nconsole.log(arrRemoved3); 　　　　　　　　　　//[7]\n")])])]),r("h3",{attrs:{id:"indexof-方法和lastindexof-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#indexof-方法和lastindexof-方法"}},[a._v("#")]),a._v(" indexOf()方法和lastIndexOf()方法")]),a._v(" "),r("p",[a._v("indexOf()语法：")]),a._v(" "),r("p",[a._v("1、可以接收一个参数或两个参数。一个参数表示要查找的项；两个参数的第二个参数表示查找起点位置的索引。")]),a._v(" "),r("p",[a._v("2、是全等匹配")]),a._v(" "),r("p",[a._v("结果：查找第一次出现的值。从数组的开始（索引为0）开始向后查找，查找到第一个出现的值后就停止。")]),a._v(" "),r("p",[a._v("lastIndexOf()语法\n和indexOf()语法类似，只不过是从数组末尾开始向前查找")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('var arr = [1,3,5,7,7,5,3,1];\nconsole.log(arr.indexOf(5)); 　　　　　　//2\nconsole.log(arr.lastIndexOf(5)); 　　　 //5\nconsole.log(arr.indexOf(5,2)); 　　　　 //2\nconsole.log(arr.lastIndexOf(5,4)); 　　//2\nconsole.log(arr.indexOf("5")); 　　　　 //-1\n')])])]),r("h3",{attrs:{id:"foreach-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#foreach-方法"}},[a._v("#")]),a._v(" forEach()方法")]),a._v(" "),r("p",[a._v("语法：\n1、对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。")]),a._v(" "),r("p",[a._v("2、在foreach里不能通过break结束循环。使用foreach循环就会一直循环完成")]),a._v(" "),r("h3",{attrs:{id:"map-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map-方法"}},[a._v("#")]),a._v(" map()方法")]),a._v(" "),r("p",[a._v("语法：指'映射'，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\nreturn item*item;\n});\nconsole.log(arr2); 　　　　　　　　//[1, 4, 9, 16, 25]\n")])])]),r("p",[a._v("详细阅读："),r("RouterLink",{attrs:{to:"/js/Advanced/arrgao.html"}},[a._v("map方法")])],1),a._v(" "),r("h3",{attrs:{id:"reduce-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reduce-方法"}},[a._v("#")]),a._v(" reduce()方法")]),a._v(" "),r("p",[a._v("为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1, 2, 3, 4];\nvar sum = arr.reduce(function(prev, cur, index, arr) {\n    console.log(prev, cur, index);\n    return prev + cur;\n})\nconsole.log(arr, sum);\n")])])]),r("blockquote",[r("p",[a._v("打印结果：\n1 2 1\n3 3 2\n6 4 3\n[1, 2, 3, 4] 10")])]),a._v(" "),r("h3",{attrs:{id:"filter-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filter-方法"}},[a._v("#")]),a._v(" filter()方法")]),a._v(" "),r("p",[a._v("语法：'过滤'功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\nreturn index % 3 === 0 || x >= 8;\n}); \nconsole.log(arr2); 　　　　　　　　//[1, 4, 7, 8, 9, 10]\n")])])]),r("h3",{attrs:{id:"every-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#every-方法"}},[a._v("#")]),a._v(" every()方法")]),a._v(" "),r("p",[a._v("语法：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\nreturn x < 10;\n}); \nconsole.log(arr2); 　　　　　　　　//true\nvar arr3 = arr.every(function(x) {\nreturn x < 3;\n}); \nconsole.log(arr3); 　　　　　　　　// false\n")])])]),r("h3",{attrs:{id:"some-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#some-方法"}},[a._v("#")]),a._v(" some()方法")]),a._v(" "),r("p",[a._v("语法：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\nreturn x < 3;\n}); \nconsole.log(arr2); 　　　　　　　　//true\nvar arr3 = arr.some(function(x) {\nreturn x < 1;\n}); \nconsole.log(arr3); 　　　　　　　　// false\n")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);