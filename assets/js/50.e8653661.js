(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{502:function(t,a,s){t.exports=s.p+"assets/img/XMLHttpRequest.57dd5ee5.png"},687:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"浏览器相关-xmlhttprequest对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关-xmlhttprequest对象"}},[t._v("#")]),t._v(" 浏览器相关——XMLHttpRequest对象")]),t._v(" "),a("h3",{attrs:{id:"来源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[t._v("#")]),t._v(" 来源")]),t._v(" "),a("p",[t._v("浏览器向服务器发出HTTP请求，服务器接收到请求，处理请求后，返回数据给客户端，更新当前网页的对应部分。不用刷新整个页面才更新网页数据。")]),t._v(" "),a("p",[t._v("只要是由网页向服务器发起请求的这个过程，我们称之为Ajax通信.")]),t._v(" "),a("p",[t._v("Ajax是通过原生的"),a("code",[t._v("XMLHttpRequest")]),t._v("对象发出的HTTP请求。用户浏览器和服务器之间的通信。")]),t._v(" "),a("p",[t._v("Ajax的特点就是："),a("code",[t._v("异步加载，局部刷新")]),t._v("。不更新整个页面的前提下维护网页数据。")]),t._v(" "),a("h3",{attrs:{id:"ajax优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax优缺点"}},[t._v("#")]),t._v(" Ajax优缺点")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、使用异步请求，实现局部刷新，提升用户体验")])]),t._v(" "),a("li",[a("p",[t._v("2、优化浏览器和服务器之间的传输，减少不必要的数据传递，减少带宽占用。")])]),t._v(" "),a("li",[a("p",[t._v("3、ajax在客户端使用，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。")])])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、ajax不支持浏览器back按钮")])]),t._v(" "),a("li",[a("p",[t._v("2、安全问题 Aajax暴露了与服务器交互的细节")])]),t._v(" "),a("li",[a("p",[t._v("3、对搜索引擎的支持比较弱")])]),t._v(" "),a("li",[a("p",[t._v("4、破坏了Back与History后退按钮的正常行为等浏览器机制")])])]),t._v(" "),a("h3",{attrs:{id:"ajax通信流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax通信流程"}},[t._v("#")]),t._v(" Ajax通信流程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、创建XMLHttpRequest对象(var xhr = new XMLHttpRequest())")])]),t._v(" "),a("li",[a("p",[t._v("2、创建新的HTTP请求，指定请求方式、URL、异步或同步(xhr.open()--建立请求)")])]),t._v(" "),a("li",[a("p",[t._v("3、设置请求头，发送HTTP请求 (xhr.open()--建立请求；xhr.send()--发出请求)")])]),t._v(" "),a("li",[a("p",[t._v("3、接收服务器传回的数据(xhr.responseText)")])]),t._v(" "),a("li",[a("p",[t._v("4、获取异步调用返回的数据")])]),t._v(" "),a("li",[a("p",[t._v("5、使用JavaScript和DOM实现局部刷新.")])])]),t._v(" "),a("p",[t._v("在第二个步骤中，我们还可以设置请求头；第三步，需要判断判断服务器的通信状态，判断服务器返回的状态码等。")]),t._v(" "),a("p",[t._v("一个简单完整的Ajax")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xhr.open()，建立请求，有3个参数，分别表示，请求方式get/post；请求地址，接口地址；异步或同步（true表示异步，false表示同步)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get 请求需要带参数时，直接在接口地址后面拼接字符串")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx'")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送请求。参数为null，表示不传参。如果是post请求需要传参，需要转换为字符串形式传递。")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件监听，监听服务器通信状态")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通信返回的状态，成功时，状态值为4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务器返回的状态码，200和304表示返回的是正常状态")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从服务器接收到的字符串")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"xmlhttprequest-实例属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-实例属性和方法"}},[t._v("#")]),t._v(" XMLHttpRequest()实例属性和方法")]),t._v(" "),a("p",[a("img",{attrs:{src:s(502),alt:"XMLHttpRequest"}})]),t._v(" "),a("h3",{attrs:{id:"ajax和promise-ajax和axios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax和promise-ajax和axios"}},[t._v("#")]),t._v(" Ajax和Promise，Ajax和axios")]),t._v(" "),a("p",[t._v("首先我们要明白，ajax是一种客户端和服务端通信方式；通过"),a("code",[t._v("XMLHttpRequest()")]),t._v("对象来实现的；"),a("code",[t._v("promise")]),t._v("是一个对象，是为了解决异步编程一个媒介，也是为了解决ajax"),a("code",[t._v("回调地狱")]),t._v("的问题。")]),t._v(" "),a("p",[t._v("Axios是一个基于Promise的 HTTP库，也是对原生ajax的封装。axios底层还是使用原生的ajax，而ajax不只是axios。")]),t._v(" "),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("使用ajax访问服务端地址，必须坚持同源策略。否则会造成跨域问题。同源策略是为了防止某个文档或脚本从多个不同源装载。")]),t._v(" "),a("p",[t._v("同源策略：协议、域名、端口全部相同。只要有一个不相同就不是同源")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:""}},[t._v("跨域解决方案")])])])}),[],!1,null,null,null);a.default=e.exports}}]);