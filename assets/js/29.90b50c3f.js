(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{538:function(t,a,s){t.exports=s.p+"assets/img/kuayu1.5ac279e0.png"},539:function(t,a,s){t.exports=s.p+"assets/img/kuayu2.81a173f0.png"},738:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"跨域的原理和解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域的原理和解决办法"}},[t._v("#")]),t._v(" 跨域的原理和解决办法")]),t._v(" "),a("h3",{attrs:{id:"什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[t._v("#")]),t._v(" 什么是跨域")]),t._v(" "),a("p",[a("img",{attrs:{src:s(538),alt:"跨域"}})]),t._v(" "),a("p",[t._v("比如上面，前端向后端请求接口时，控制台报错，出现类似上面的信息，出现这个错误就是跨域了。")]),t._v(" "),a("blockquote",[a("p",[t._v("跨域：浏览器不能访问其他执行其他网站的脚本")])]),t._v(" "),a("p",[t._v("在前端领域，像a链接，表单提交；像"),a("code",[t._v("<link>")]),t._v("、"),a("code",[t._v("<script>")]),t._v("、"),a("code",[t._v("<img>")]),t._v("、"),a("code",[t._v("<frame>")]),t._v("等dom标签，还有样式中 background:url()、@font-face() 等嵌入的文件外链，又比如一些像  js 发起的ajax请求、dom 和 js 对象的跨域操作等等都是跨域。")]),t._v(" "),a("p",[t._v("我们通常所说的跨域，大多是针对访问请求。也就是A页面访问B页面或A页面请求接口等发生的跨域现象。")]),t._v(" "),a("h3",{attrs:{id:"为什么会设置跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会设置跨域"}},[t._v("#")]),t._v(" 为什么会设置跨域")]),t._v(" "),a("p",[t._v("还是因为安全问题。")]),t._v(" "),a("p",[t._v("因为从客户端发送到后台的请求并不能区分发送者是谁。所以浏览器主动预防了。")]),t._v(" "),a("p",[t._v("浏览器设置了什么？可以主动预防")]),t._v(" "),a("p",[a("code",[t._v("同源策略")]),t._v("。是浏览器对JavaScript的安全限制。为了保护用户隐私")]),t._v(" "),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("blockquote",[a("p",[t._v("同源：就是域名、协议、端口均相同")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(539),alt:"同源策略"}})]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// url")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同一域名，不同文件，没有跨域，可以访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html \n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("login"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同一域名，不同端口，有跨域，不能访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("htpp")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同一域名，不同协议，有跨域,不能访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("https")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主域名相同，子域名不同.有跨域，不能访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n")])])]),a("p",[t._v("从上面可以看出，要想不跨域，客户端地址和访问的地址前面必须一模一样。")]),t._v(" "),a("p",[t._v("1、为什么"),a("code",[t._v("http://www.abc.baidu.com")]),t._v("和"),a("code",[t._v("http://www.baidu.com")]),t._v("也是跨域")]),t._v(" "),a("p",[t._v("因为会存在共用服务器，只是使用服务器上不同空间的原因。这两个不一定是同一个网站，浏览器会认为这是两个不同的源")]),t._v(" "),a("p",[t._v("2、为什么不同端口也不行")]),t._v(" "),a("p",[t._v("一个端口一个公司的情况也是有的，也要杜绝这种情况")]),t._v(" "),a("h3",{attrs:{id:"同源策略导致的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略导致的问题"}},[t._v("#")]),t._v(" 同源策略导致的问题")]),t._v(" "),a("p",[t._v("浏览器的同源策略主要限制以下几点：")]),t._v(" "),a("p",[t._v("1、Cookie/localStorage/sessionStrorage/IndexdDB等存储内容无法读取")]),t._v(" "),a("p",[t._v("2、DOM节点和JS对象无法获取")]),t._v(" "),a("p",[t._v("3、Ajax请求后，浏览器主动拦截，无法获取返回值")]),t._v(" "),a("h3",{attrs:{id:"有什么是不跨域的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有什么是不跨域的吗"}},[t._v("#")]),t._v(" 有什么是不跨域的吗？")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("link")]),t._v("/"),a("code",[t._v("script")]),t._v("/"),a("code",[t._v("src")]),t._v("引入外部资源，是不跨域的。这是因为我们通过script、link、src引入外部资源，我们只是引用，并不知道其内容。不会发生跨域问题。")]),t._v(" "),a("p",[t._v("同源策略限制的是数据访问")]),t._v(" "),a("h3",{attrs:{id:"解决跨域的方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域的方案"}},[t._v("#")]),t._v(" 解决跨域的方案")]),t._v(" "),a("p",[t._v("写在前面：其实在实际工作中，前端解决跨域的方案有限，要么鸡肋，要么难用。如果是协议或端口不一致的，更是无能为力。所以解决跨域的方案一般是服务端解决。这里介绍一些前端方案，仅做了解。")]),t._v(" "),a("p",[t._v("跨域的解决方案一般有以下9种方法;")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JSONP方法")])]),t._v(" "),a("li",[a("p",[t._v("CORS方法")])]),t._v(" "),a("li",[a("p",[t._v("postMessage")])]),t._v(" "),a("li",[a("p",[t._v("websocket")])]),t._v(" "),a("li",[a("p",[t._v("Node中间件代理(两次跨域)")])]),t._v(" "),a("li",[a("p",[t._v("nginx反向代理")])]),t._v(" "),a("li",[a("p",[t._v("window.name + iframe")])]),t._v(" "),a("li",[a("p",[t._v("location.hash + iframe")])]),t._v(" "),a("li",[a("p",[t._v("document.domain + iframe")])])]),t._v(" "),a("p",[t._v("参考文章:"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000011145364",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域解决方案"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("延伸阅读："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/149734572?from_voters_page=true",target:"_blank",rel:"noopener noreferrer"}},[t._v("CORS解决方案"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("根据实际项目总结：")]),t._v(" "),a("p",[t._v("1、JSONP方法只能使用get请求，逐渐淘汰")]),t._v(" "),a("p",[t._v("2、各种iframe方法，代码控制起来比较麻烦。而且需要不同的场景，使用较少。其中使用限制如下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.domain + iframe：适用主域名相同，子域名不同的跨域场景\n\nwindow.name + iframe：利用name值最长可以 2M ，并用不同页面或不同域名加载后依然存在的特性\n\nlocation.hash + iframe：适用通过 C 页面来实现 A 页面与 B 页面通信的场景\n")])])]),a("p",[t._v("3、nginx反向代理是绕过去的方式。反向代理也比较适合内部应用访问和共享。实际工作中使用较多。")]),t._v(" "),a("p",[t._v("4、CORS是支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案。因为请求存在跨域，结果是拿到了数据，也就是说服务器和浏览器之间进行了协商通信控制后，才得以允许或拒绝")]),t._v(" "),a("p",[t._v("5、解决跨域问题通常采用的是服务端代理转发和配置CORS两种方式。")]),t._v(" "),a("h3",{attrs:{id:"问题-跨域时-请求到底发出去了吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题-跨域时-请求到底发出去了吗"}},[t._v("#")]),t._v(" 问题：跨域时，请求到底发出去了吗？")]),t._v(" "),a("p",[t._v("结论："),a("code",[t._v("请求会发出去")])]),t._v(" "),a("p",[t._v("首先同源策略是浏览器行为，客户端向服务端发送请求，HTTP Request中所有的Header都是可以被篡改的，服务端也根本判断不了请求是否跨域。")]),t._v(" "),a("p",[t._v("所以请求是可以发送出去的。")]),t._v(" "),a("p",[t._v("既然请求是可以发出去的，那么跨域请求时，是在什么时候被拦截了呢？被谁拦截了？")]),t._v(" "),a("p",[t._v("解决跨域的方法中，有一个方法就是设置CORS。")]),t._v(" "),a("p",[t._v("大概的原理就是客户端会通过服务端返回的一些请求头(Header)去判断请求是否允许跨域。比如，"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 告诉客户端允许请求在哪些 Origin 下被发送，这些 Header 一般都是我们配在 Server 上的。既然客户端可以收到服务端返回的请求头，那么我们更加肯定："),a("code",[t._v("请求是能发送的，服务器也能正常接收。如果请求有返回值，浏览器会把跨域请求回来的数据屏蔽掉了。")]),t._v("。")]),t._v(" "),a("p",[t._v("由于业务关系，不可能所有的请求都是同源的，所以跨域在不同的场景中必定存在，虽然跨域，但又要达到请求的目的。浏览器只是默认是拦截的，但开启跨域与否这个权限是交给开发人员的。")]),t._v(" "),a("p",[t._v("比如谷歌浏览器就可以通过设置关闭跨域。在49版本之前可以设置在属性栏加上"),a("code",[t._v("--disable-web-security")]),t._v("进行跨域设置。")]),t._v(" "),a("h3",{attrs:{id:"第二个问题-跨域的请求一定会被服务器执行吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二个问题-跨域的请求一定会被服务器执行吗"}},[t._v("#")]),t._v(" 第二个问题：跨域的请求一定会被服务器执行吗？")]),t._v(" "),a("p",[t._v("通过上面的分析，我们已经知道了，同源策略就是浏览器的策略。跨域请求由客户端发送，服务端接收并返回。如果有返回值，浏览器会把返回值屏蔽掉。")]),t._v(" "),a("p",[t._v("那么，请求发出去，服务端就一定会执行这条请求吗？")]),t._v(" "),a("p",[t._v("答案：不一定")]),t._v(" "),a("p",[t._v("实际开发中，有时候我们明明只请求了一次，但是在network里面却发现有两次请求，其中第一次请求的状态是"),a("code",[t._v("OPTIONS")]),t._v("。"),a("code",[t._v("OPTIONS")]),t._v("是一种安全的请求，不会修改服务器资源。其中有一个"),a("code",[t._v("重要用途就是：CORS中的预检请求")]),t._v("。")]),t._v(" "),a("p",[t._v("预检请求作用是："),a("code",[t._v("询问服务端是不是允许跨域请求")])]),t._v(" "),a("p",[t._v("预检请求的过程：")]),t._v(" "),a("p",[t._v("如果是一个跨域请求，浏览器会自动在请求头上带上origin头部，标明当前请求的来源，服务器判断这个请求是否跨域，就会在返回时，选择是否带上"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("头部，浏览器通过判断这个请求头的信息就知道是否跨域了，会不会发送真正的请求。")]),t._v(" "),a("p",[t._v("好了，那我们可以回答这个问题了。")]),t._v(" "),a("p",[t._v("1、如果没有预检请求，那么浏览器发出请求，服务端一定能接收并执行，返回值被浏览器拦截")]),t._v(" "),a("p",[t._v("2、如果有预检请求，浏览器先发预检请求，服务端根据请求头信息判断是否要执行，否则只会告知浏览器是否允许。如果预检请求通过，浏览器才会发出真正的请求，服务端接收并执行返回。")]),t._v(" "),a("h3",{attrs:{id:"第三个问题-所有请求都有预检请求吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三个问题-所有请求都有预检请求吗"}},[t._v("#")]),t._v(" 第三个问题：所有请求都有预检请求吗？")]),t._v(" "),a("p",[t._v("答案：不一定")]),t._v(" "),a("p",[t._v("浏览器根据是否是简单请求或复杂请求来判断是否要发送预检请求")]),t._v(" "),a("p",[t._v("是否为简单请求？必须同时满足以下四个条件")]),t._v(" "),a("p",[t._v("1、使用GET/POST/HEAD这3个方法之一")]),t._v(" "),a("p",[t._v("2、只使用了以下安全的Header，不得人为设置其他Header")]),t._v(" "),a("ul",[a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Content-Type 的值仅限于下列三者之一：text/plain、multipart/form-data、application/x-www-form-urlencoded")])]),t._v(" "),a("p",[t._v("3、请求中的任意 XMLHttpRequest 对象均没有注册任何事件监听器；XMLHttpRequest 对象可以使用 XMLHttpRequest.upload 属性访问。")]),t._v(" "),a("p",[t._v("4、请求中没有使用 ReadableStream 对象。")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("1、浏览器的同源策略导致的跨域问题")]),t._v(" "),a("p",[t._v("2、跨域请求，浏览器端能发出请求，服务端能接受到请求。返回时被浏览器拦截")]),t._v(" "),a("p",[t._v("3、有9种方法可以解决跨域问题。比较常用的有Nginx反向代理和CORS方法")]),t._v(" "),a("p",[t._v("4、跨域请求时，有简单请求还是复杂请求，如果是复杂请求，浏览器就会先发送预检请求，预检请求通过后，服务端才会真正执行这个请求。")])])}),[],!1,null,null,null);a.default=e.exports}}]);